AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Demo RDS PostgreSQL Single Instance (Free Tier Friendly)
Parameters:
  EnvironmentKey:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - staging
    - prod
    Description: Environment where this stack is deployed (dev/staging/prod)
  DBName:
    Type: String
    Default: parkingdb
    Description: Base database name
  DBUsername:
    Type: String
    Default: postgres
    Description: Master username for RDS
  DBPassword:
    Type: String
    NoEcho: true
    Description: Master password for RDS
  MyIP:
    Type: String
    Default: 127.0.0.1/32
    Description: 'Restrict DB access to this public IP (format: x.x.x.x/32)'
Conditions:
  IsProd:
    Fn::Equals:
    - Ref: EnvironmentKey
    - prod
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: parkingdb-vpc-${EnvironmentKey}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value:
          Fn::Sub: parkingdb-public-subnet1-${EnvironmentKey}
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value:
          Fn::Sub: parkingdb-public-subnet2-${EnvironmentKey}
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: RouteTable
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: RouteTable
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS PostgreSQL
      SubnetIds:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to PostgreSQL only from my IP
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp:
          Ref: MyIP
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DBInstanceIdentifier:
        Fn::Sub: parkingdb-rds-${EnvironmentKey}
      AllocatedStorage: 20
      MaxAllocatedStorage: 100
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername:
        Ref: DBUsername
      MasterUserPassword:
        Ref: DBPassword
      DBName:
        Fn::Sub: ${DBName}_${EnvironmentKey}
      VPCSecurityGroups:
      - Fn::GetAtt:
        - DBSecurityGroup
        - GroupId
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      PubliclyAccessible: true
      BackupRetentionPeriod:
        Fn::If:
        - IsProd
        - 7
        - 1
      DeletionProtection:
        Fn::If:
        - IsProd
        - true
        - false
      StorageEncrypted: true
      Tags:
      - Key: EnvironmentKey
        Value:
          Ref: EnvironmentKey
  DBCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: parkingdb-db-credentials-${EnvironmentKey}
      Description:
        Fn::Sub: Credentials for PostgreSQL RDS ${EnvironmentKey}
      SecretString:
        Fn::Sub: "{\n  \"username\":\"${DBUsername}\",\n  \"password\":\"${DBPassword}\"\
          ,\n  \"engine\":\"postgres\",\n  \"host\":\"${RDSInstance.Endpoint.Address}\"\
          ,\n  \"port\":\"5432\",\n  \"dbname\":\"${DBName}${EnvironmentKey}\"\n}\n"
Outputs:
  RDSEndpoint:
    Description: Endpoint of the RDS instance
    Value:
      Fn::GetAtt:
      - RDSInstance
      - Endpoint.Address
  DatabaseName:
    Description: Database name
    Value:
      Fn::Sub: ${DBName}${EnvironmentKey}
  DBSecretARN:
    Description: ARN of the database credentials secret
    Value:
      Ref: DBCredentialsSecret
