# SAM Template: Parking Step Function (IoT Parking Simulation)
# Provisions an AWS Step Functions State Machine to orchestrate the IoT Parking demo flow.
# The flow updates the Device Shadow, waits for synchronization, retrieves state, updates DB, and notifies SNS.
# Integrates with existing Lambda functions (UpdateDeviceShadow, GetShadow, UpdateDB, SNSNotify).
# Optimized for demo: Manual trigger, simple retry, and loop simulation.

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Demo Step Function for IoT Parking Simulation (Free Tier Friendly)

Parameters:
  EnvironmentKey:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment where this stack is deployed (dev/staging/prod)

Resources:

  # Step Function definition for IoT Parking flow
  ParkingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub parking-simulation-${EnvironmentKey}
      RoleArn:
        Fn::ImportValue: !Sub "StepFunctionExecutionRoleArn-${EnvironmentKey}"
      Definition:
        Comment: "IoT Parking Simulation Flow"
        StartAt: SendDevicesToQueue
        States:
          #UpdateDeviceShadow:
          #  Type: Task
          #  Resource: arn:aws:states:::lambda:invoke
          #  TimeoutSeconds: 3
          #  OutputPath: "$.Payload" # Extracts only the Lambda's response body (Payload) from the full Step Functions task output
          #  Parameters:
          #    FunctionName: 
          #      Fn::ImportValue: !Sub UpdateDeviceShadowFunctionArn-${EnvironmentKey}
          #    Payload:
          #      slotId.$: "$.slotId"   # Dynamically passes the 'slotId' field from the state input to the Lambda payload
          #      status.$: "$.status"   # Dynamically passes the 'status' field from the state input to the Lambda payload
          #  Next: WaitShadowSync

          SendDevicesToQueue:
            Type: Map
            ItemsPath: $.devices # Iterate over each device in the input array
            Parameters:
              QueueUrl:
                Fn::ImportValue: !Sub StartProcessingQueueUrl-${EnvironmentKey} # Import the SQS queue URL from the Messaging stack
              MessageBody.$: "$"  # Pass the current device object (e.g., {"slotId":"PARK001","status":"occupied"}) as the message body
            Iterator:
              StartAt: SendSingleDevice  # Define the inner workflow for each device iteration
              States:
                SendSingleDevice:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage
                  Parameters:
                    QueueUrl.$: "$.QueueUrl"  # Use the imported QueueUrl from the parent Parameters
                    MessageBody.$: "$.MessageBody"  # Use the current iteration payload as the SQS message body
                  End: true  # End this inner iteration
            Next: WaitShadowSync  # Continue the main workflow once all messages are sent

          WaitShadowSync:
            Type: Wait
            Seconds: 5
            Next: GetDeviceShadow

          GetDeviceShadow:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            TimeoutSeconds: 3
            OutputPath: "$.Payload"
            Parameters:
              FunctionName:
                Fn::ImportValue: !Sub GetDeviceShadowFunctionArn-${EnvironmentKey}
              Payload:
                slotId.$: "$.slotId"  # Pass the current slot ID to fetch its latest shadow state
            Next: CheckSync
            
          CheckSync:
            Type: Choice
            Choices:
              - Variable: "$.isSynced"
                BooleanEquals: true
                Next: EndSimulation
            Default: SNSNotify

          SNSNotify:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            TimeoutSeconds: 3
            OutputPath: "$.Payload"
            Parameters:
              FunctionName:
                Fn::ImportValue: !Sub SnsNotifyFunctionArn-${EnvironmentKey}
              Payload:
                slotId.$: "$.slotId"
                message: "Shadow is not synchronized"
            Next: EndSimulation

          EndSimulation:
            Type: Succeed
            Comment: "Marks the end of the IoT Parking simulation"

      TracingConfiguration:
        Enabled: true
      Tags:
        - Key: EnvironmentKey
          Value: !Ref EnvironmentKey

Outputs:
  ParkingStateMachineArn:
    Description: ARN of the IoT Parking Step Function
    Value: !Ref ParkingStateMachine
    Export:
      Name: !Sub ParkingStateMachineArn-${EnvironmentKey}
