# SAM Template: Parking Step Function (IoT Parking Simulation)
# Provisions an AWS Step Functions State Machine to orchestrate the IoT Parking demo flow.
# The flow updates the Device Shadow, waits for synchronization, retrieves state, updates DB, and notifies SNS.
# Integrates with existing Lambda functions (UpdateDeviceShadow, GetShadow, UpdateDB, SNSNotify).
# Optimized for demo: Manual trigger, simple retry, and loop simulation.

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Demo Step Function for IoT Parking Simulation (Free Tier Friendly)

Parameters:
  EnvironmentKey:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment where this stack is deployed (dev/staging/prod)

Resources:

  ParkingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub parking-simulation-${EnvironmentKey}
      RoleArn:
        Fn::ImportValue: !Sub "StepFunctionExecutionRoleArn-${EnvironmentKey}"
      Definition:
        Comment: "IoT Parking Simulation Flow"
        StartAt: SendDevicesToQueue
        States:

          # Iterate over each device independently
          SendDevicesToQueue:
            Type: Map
            ItemsPath: $.devices  # Each element in 'devices' is processed as a separate iteration
            Iterator:
              StartAt: SendSingleDevice
              States:

                # Step 1: Send device payload to SQS
                SendSingleDevice:
                  Type: Task
                  Resource: arn:aws:states:::sqs:sendMessage
                  Parameters:
                    QueueUrl:
                      Fn::ImportValue: !Sub StartProcessingQueueUrl-${EnvironmentKey}
                    MessageBody.$: "$"       # "$" refers to the current device object (e.g. {slotId, status})
                  ResultPath: "$.sqsResult"  # preserve the original input
                  Next: WaitShadowSync       # Continue to next step after message is sent

                # Step 2: Wait before checking the shadow
                WaitShadowSync:
                  Type: Wait
                  Seconds: 5
                  Next: GetDeviceShadow

                # Step 3: Retrieve device shadow
                GetDeviceShadow:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke
                  TimeoutSeconds: 3
                  OutputPath: "$.Payload"
                  Parameters:
                    FunctionName:
                      Fn::ImportValue: !Sub GetDeviceShadowFunctionArn-${EnvironmentKey}
                    Payload:
                      slotId.$: "$.slotId"  # Pass the current slotId for shadow retrieval
                  Next: CheckSync

                # Step 4: Validate synchronization
                CheckSync:
                  Type: Choice
                  Choices:
                    - Variable: "$.isSynced"
                      BooleanEquals: true
                      Next: EndDevice
                  Default: SNSNotify

                # Step 5: Send notification if not synced
                SNSNotify:
                  Type: Task
                  Resource: arn:aws:states:::lambda:invoke
                  TimeoutSeconds: 3
                  OutputPath: "$.Payload"
                  Parameters:
                    FunctionName:
                      Fn::ImportValue: !Sub SnsNotifyFunctionArn-${EnvironmentKey}
                    Payload:
                      slotId.$: "$.slotId"
                      message: "Shadow is not synchronized"
                  Next: EndDevice

                # Step 6: End of single device flow
                EndDevice:
                  Type: Succeed
                  Comment: "End of individual device iteration"

            # Continue main flow after all devices are processed
            Next: EndSimulation

          # Step 7: Final state (all devices done)
          EndSimulation:
            Type: Succeed
            Comment: "All device simulations completed"

      TracingConfiguration:
        Enabled: true
      Tags:
        - Key: EnvironmentKey
          Value: !Ref EnvironmentKey

Outputs:
  ParkingStateMachineArn:
    Description: ARN of the IoT Parking Step Function
    Value: !Ref ParkingStateMachine
    Export:
      Name: !Sub ParkingStateMachineArn-${EnvironmentKey}
